version: '3.7'

services:

  broker:
    image: confluentinc/cp-kafka:8.0.0
    container_name: broker
    networks: 
      - kafka-local
    ports:
      - "9092:9092"
    environment:
      # Enable KRaft (replaces Zookeeper)
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      CLUSTER_ID: z5Q_VF3DThqCfPz_Hvk8RA # Generate using docker docker run -it --rm confluentinc/cp-kafka kafka-storage random-uuid

      # Listeners
      KAFKA_LISTENERS: INTERNAL://broker:29092,TOKEN://broker:9092,CONTROLLER://broker:29093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29092,TOKEN://broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,TOKEN:SASL_SSL,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Metadata Topics
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      # Logs
      KAFKA_LOG_DIRS: /var/lib/kafka/data

      # Schema Registry
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # Configure custom Truststore when using SASL_SSL between broker and client
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/truststore/kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: 123456
      KAFKA_SSL_KEYSTORE_LOCATION: /var/ssl/private/keystore/kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: 123456
      KAFKA_SSL_KEY_PASSWORD: 123456
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:ANONYMOUS
      #KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      # KAFKA Security
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN, OAUTHBEARER


      # KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      # KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
      #         org.apache.kafka.common.security.plain.PlainLoginModule required \
      #         username="admin" \
      #         password="admin-secret" \
      #         user_admin="admin-secret" \
      #         user_mds="mds-secret";

      # OAuth Configuration
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackHandler
      #KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
      KAFKA_LISTENER_NAME_TOKEN_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_TOKEN_OAUTHBEARER_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;"
      KAFKA_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: https://login.microsoftonline.com/f3292839-9228-4d56-a08c-6023c5d71e65/discovery/v2.0/keys # to edit
      KAFKA_SASL_OAUTHBEARER_SCOPE_CLAIM: scp
      KAFKA_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: "c8843062-a9dc-49ed-8874-3b2d911ca41a"
      # Add system property to allow keys url to be allowed
      KAFKA_OPTS: "-Dorg.apache.kafka.sasl.oauthbearer.allowed.urls=https://login.microsoftonline.com/f3292839-9228-4d56-a08c-6023c5d71e65/discovery/v2.0/keys"
    volumes:
      - "{E2E_DIR_PATH}/broker:/var/ssl/private"


  schema-registry:
    image: confluentinc/cp-schema-registry:8.0.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks: 
      - kafka-local

  # oauth2-proxy:
  #   container_name: oauth2-proxy
  #   image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
  #   environment: 
  #     OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
  #     OAUTH2_PROXY_UPSTREAM: "http://schema-registry:8081/"
  #     OAUTH2_PROXY_PROVIDER: oidc
  #     OAUTH2_PROXY_OIDC_ISSUER_URL: https://login.microsoftonline.com/f3292839-9228-4d56-a08c-6023c5d71e65/v2.0
  #     #OAUTH2_PROXY_OIDC_JWKS_URL: https://login.microsoftonline.com/f3292839-9228-4d56-a08c-6023c5d71e65/discovery/v2.0/keys
  #     OAUTH2_PROXY_EMAIL_DOMAINS: "*"
  #     OAUTH2_PROXY_EMAIL_DOMAIN: "*"
  #     OAUTH2_PROXY_OIDC_EMAIL_CLAIM: oid
  #     OAUTH2_PROXY_COOKIE_SECRET: "OQINaROshtE9TcZkNAm-5Zs2Pv3xaWytBmc5W7sPX7w=" 
  #     OAUTH2_PROXY_COOKIE_SECURE: "false"
  #     OAUTH2_PROXY_CLIENT_ID: "12345" 
  #     OAUTH2_PROXY_CLIENT_SECRET: "54321" 
  #     OAUTH2_PROXY_COOKIE_SECURE: "false"
  #     OAUTH2_PROXY_REQUEST_LOGGING: "true"
  #     OAUTH2_PROXY_STANDARD_LOGGING: "true"
  #     OAUTH2_PROXY_AUTH_LOGGING: "true"
  #     OAUTH2_PROXY_ERRORS_TO_INFO_LOG: "true"
  #     OAUTH2_PROXY_SHOW_DEBUG_ON_ERROR: "true"
  #   ports:
  #     - 4180:4180/tcp
  #   hostname: oauth2-proxy
  #   restart: unless-stopped
  #   networks:
  #     - kafka-local

  # gatekeeper:
  #   container_name: gatekeeper
  #   image: quay.io/gogatekeeper/gatekeeper:2.6.0
  #   environment:
  #     PROXY_LISTEN: 127.0.0.1:8080
  #     PROXY_DISCOVERY_URL: https://login.microsoftonline.com/f3292839-9228-4d56-a08c-6023c5d71e65/v2.0/.well-known/openid-configuration
  #     # https://login.microsoftonline.com/f3292839-9228-4d56-a08c-6023c5d71e65/v2.0
  #     PROXY_UPSTREAM_URL: http://schema-registry:8081
  #     PROXY_CLIENT_ID: c8843062-a9dc-49ed-8874-3b2d911ca41a
  #     PROXY_ENABLE_LOGGING: "true"
  #     PROXY_VERBOSE: "true"
  #   ports:
  #     - 8080:8080/tcp
  #   hostname: gatekeeper
  #   restart: unless-stopped
  #   networks:
  #     - kafka-local


  # gatekeeper:
  #   container_name: gatekeeper
  #   image: io.github.nniikkoollaaii.schema-registry-authn:1.0.0
  #   ports:
  #     - 8080:8080/tcp
  #   hostname: schema-registry-gateway
  #   environment:
  #     LOGGING_LEVEL_ROOT: DEBUG
  #   restart: unless-stopped
  #   networks:
  #     - kafka-local
  

networks: 
  kafka-local: